generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// DATA MODEL

model User {
  id                      String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String?
  email                   String                  @unique
  createdAt               DateTime                @default(now())
  authSource              String
  authId                  String                  @db.Uuid
  accounts                Account[]
  categories              Category[]
  metaCategories          MetaCategory[]
  transactions            Transaction[]
  categorizedTransactions TransactionByCategory[]
}

model Account {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user               User          @relation(fields: [userId], references: [id])
  userId             String        @db.Uuid
  title              String        @db.VarChar(255)
  type               String?
  accentColor        String?
  dateFirstAvailable DateTime?
  createdAt          DateTime      @default(now())
  transactions       Transaction[]

  @@index([userId])
}

model Merchant {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String        @db.VarChar(255)
  description  String?
  transactions Transaction[]
}

model Transaction {
  id           String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user         User                    @relation(fields: [userId], references: [id])
  userId       String                  @db.Uuid
  account      Account?                @relation(fields: [accountId], references: [id])
  accountId    String?                 @db.Uuid
  merchant     Merchant                @relation(fields: [merchantId], references: [id])
  merchantId   String                  @db.Uuid
  amount       Int
  description  String?
  postedAt     DateTime
  transactedAt DateTime?
  createdAt    DateTime                @default(now())
  categories   TransactionByCategory[]

  @@index([userId])
  @@index([accountId])
  @@index([merchantId])
}

model Category {
  id             String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user           User                    @relation(fields: [userId], references: [id])
  userId         String                  @db.Uuid
  title          String                  @db.VarChar(255)
  description    String?
  accentColor    String?
  createdAt      DateTime                @default(now())
  transactions   TransactionByCategory[]
  metaCategory   MetaCategory?           @relation(fields: [metaCategoryId], references: [id])
  metaCategoryId String?                 @db.Uuid

  @@index([userId])
  @@index([metaCategoryId])
}

model TransactionByCategory {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.Uuid
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @db.Uuid
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String      @db.Uuid
  amount        Int
  description   String?
  createdAt     DateTime    @default(now())

  @@index([userId])
  @@index([transactionId])
  @@index([categoryId])
}

model MetaCategory {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.Uuid
  title       String     @db.VarChar(255)
  description String?
  accentColor String?
  createdAt   DateTime   @default(now())
  categories  Category[]

  @@index([userId])
}
